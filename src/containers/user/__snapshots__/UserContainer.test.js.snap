// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserContainer should renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserContainer
    errorRepoDetail={false}
    errorRepos={false}
    homeReducer={
        Object {
            "error": false,
            "loading": false,
            "user": Object {},
          }
    }
    loadingRepoDetail={false}
    loadingRepos={false}
    modalRepoOpen={false}
    repositories={Array []}
    repository={Object {}}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <UserBackButton
          onPress={[Function]}
/>,
        <styled.div>
          <Unknown>
                    <UserInfo
                              userData={Object {}}
                    />
                    <UserRepositories
                              onPressOrderStar={[Function]}
                              onRepositoryPress={[Function]}
                              repositories={Array []}
                              starOrdered={false}
                    />
          </Unknown>
</styled.div>,
        <UserModalRepository
          error={false}
          loading={false}
          modalOpen={false}
          onClose={[Function]}
          repo={Object {}}
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "onPress": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Unknown>
            <UserInfo
                        userData={Object {}}
            />
            <UserRepositories
                        onPressOrderStar={[Function]}
                        onRepositoryPress={[Function]}
                        repositories={Array []}
                        starOrdered={false}
            />
</Unknown>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <UserInfo
                userData={Object {}}
/>,
              <UserRepositories
                onPressOrderStar={[Function]}
                onRepositoryPress={[Function]}
                repositories={Array []}
                starOrdered={false}
/>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "userData": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "onPressOrderStar": [Function],
                "onRepositoryPress": [Function],
                "repositories": Array [],
                "starOrdered": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": Symbol(react.fragment),
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "error": false,
          "loading": false,
          "modalOpen": false,
          "onClose": [Function],
          "repo": Object {},
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <UserBackButton
            onPress={[Function]}
/>,
          <styled.div>
            <Unknown>
                        <UserInfo
                                    userData={Object {}}
                        />
                        <UserRepositories
                                    onPressOrderStar={[Function]}
                                    onRepositoryPress={[Function]}
                                    repositories={Array []}
                                    starOrdered={false}
                        />
            </Unknown>
</styled.div>,
          <UserModalRepository
            error={false}
            loading={false}
            modalOpen={false}
            onClose={[Function]}
            repo={Object {}}
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "onPress": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Unknown>
              <UserInfo
                            userData={Object {}}
              />
              <UserRepositories
                            onPressOrderStar={[Function]}
                            onRepositoryPress={[Function]}
                            repositories={Array []}
                            starOrdered={false}
              />
</Unknown>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <UserInfo
                  userData={Object {}}
/>,
                <UserRepositories
                  onPressOrderStar={[Function]}
                  onRepositoryPress={[Function]}
                  repositories={Array []}
                  starOrdered={false}
/>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "userData": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "onPressOrderStar": [Function],
                  "onRepositoryPress": [Function],
                  "repositories": Array [],
                  "starOrdered": false,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": Symbol(react.fragment),
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "error": false,
            "loading": false,
            "modalOpen": false,
            "onClose": [Function],
            "repo": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "disableLifecycleMethods": true,
    "hydrateIn": undefined,
  },
}
`;
